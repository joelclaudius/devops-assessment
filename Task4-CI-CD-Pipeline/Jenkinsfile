pipeline {
    agent any

    environment {
        SECRET_KEY = credentials('SECRET_KEY')
        DEBUG = credentials('DEBUG')
        DB_NAME = credentials('DB_NAME')
        DB_USER = credentials('DB_USER')
        DB_PASSWORD = credentials('DB_PASSWORD')
        DB_HOST = credentials('DB_HOST')
        DB_PORT = credentials('DB_PORT')
        ALLOWED_HOSTS = credentials('ALLOWED_HOSTS')
        REACT_APP_API_BASE_URL = credentials('REACT_APP_API_BASE_URL')
        REACT_APP_REFRESH_TOKEN_URL = credentials('REACT_APP_REFRESH_TOKEN_URL')

        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_REGION = credentials('AWS_REGION')

        FRONTEND_ECR_URL = credentials('FRONTEND_ECR_URL')
        BACKEND_ECR_URL = credentials('BACKEND_ECR_URL')
        DATABASE_ECR_URL = credentials('DATABASE_ECR_URL')

        ECS_CLUSTER_NAME = credentials('ECS_CLUSTER_NAME')
        DJANGO_SETTINGS_MODULE = credentials('DJANGO_SETTINGS_MODULE')
        DATABASE_URL = credentials('DATABASE_URL')

        TF_VAR_AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        TF_VAR_AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[url: 'https://github.com/joelclaudius/devops-assessment.git']]
                    ])
                }
            }
        }

        stage('Setup Terraform Environment') {
            steps {
                dir('Task4-CI-CD-Pipeline/ecr-ecs-setup') {
                    script {
                        sh '''
                            sh '/usr/local/bin/terraform init'
                        '''
                    }
                }
            }
        }



        stage('Provision Infrastructure with Terraform') {
            steps {
                dir('/home/administrator/devops-assessment/Task4-CI-CD-Pipeline/ecr-ecs-setup') {
                    script {
                        // Apply Terraform configurations to create/modify resources in AWS from the specified directory
                        sh '''
                            echo "Applying Terraform configuration to provision infrastructure..."
                            terraform apply -auto-approve
                        '''
                    }
                }
            }
        }

        stage('Setup Docker Authentication') {
            steps {
                script {
                    sh '''
                        echo "Logging into AWS ECR..."
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${BACKEND_ECR_URL}
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${FRONTEND_ECR_URL}
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DATABASE_ECR_URL}
                    '''
                }
            }
        }

        stage('Build and Push Backend Image') {
            steps {
                dir('Task1-VersionControl/app/backend') {
                    script {
                        def COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def IMAGE_TAG = "latest"

                        if (!COMMIT_SHA) {
                            error "COMMIT_SHA is empty! Cannot proceed with build."
                        }

                        echo "Commit SHA for Backend: ${COMMIT_SHA}"
                        echo "Using IMAGE_TAG: ${IMAGE_TAG}"

                        sh """
                            echo "Building backend image..."
                            DOCKER_BUILDKIT=1 docker build -t ${BACKEND_ECR_URL}:${IMAGE_TAG} -t ${BACKEND_ECR_URL}:${COMMIT_SHA} \
                                --build-arg SECRET_KEY="${SECRET_KEY}" \
                                --build-arg AWS_REGION="${AWS_REGION}" \
                                --build-arg DB_PASSWORD="${DB_PASSWORD}" \
                                --build-arg DB_USER="${DB_USER}" \
                                --build-arg DATABASE_URL="${DATABASE_URL}" \
                                --build-arg DJANGO_SETTINGS_MODULE="${DJANGO_SETTINGS_MODULE}" \
                                --build-arg DB_NAME="${DB_NAME}" \
                                --build-arg DB_HOST="${DB_HOST}" \
                                --build-arg AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
                                --build-arg AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
                                --build-arg ALLOWED_HOSTS="${ALLOWED_HOSTS}" \
                                .
                        """

                        sh """
                            echo "Pushing backend image to ECR..."
                            docker push ${BACKEND_ECR_URL}:${IMAGE_TAG}
                            docker push ${BACKEND_ECR_URL}:${COMMIT_SHA}
                        """
                    }
                }
            }
        }

        stage('Build and Push Frontend Image') {
            steps {
                dir('Task1-VersionControl/app/frontend') {
                    script {
                        def COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def IMAGE_TAG = "latest"

                        if (!COMMIT_SHA) {
                            error "COMMIT_SHA is empty! Cannot proceed with build."
                        }

                        echo "Commit SHA for Frontend: ${COMMIT_SHA}"

                        sh """
                            echo "Building frontend image..."
                            DOCKER_BUILDKIT=1 docker build -t ${FRONTEND_ECR_URL}:${IMAGE_TAG} -t ${FRONTEND_ECR_URL}:${COMMIT_SHA} \
                                --build-arg REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL} \
                                --build-arg REACT_APP_REFRESH_TOKEN_URL=${REACT_APP_REFRESH_TOKEN_URL} \
                                .
                        """

                        sh """
                            echo "Pushing frontend image to ECR..."
                            docker push ${FRONTEND_ECR_URL}:${IMAGE_TAG}
                            docker push ${FRONTEND_ECR_URL}:${COMMIT_SHA}
                        """
                    }
                }
            }
        }

        stage('Build and Push Database Image') {
            steps {
                dir('Task1-VersionControl/app/database') {
                    script {
                        def COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def IMAGE_TAG = "latest"

                        if (!COMMIT_SHA) {
                            error "COMMIT_SHA is empty! Cannot proceed with build."
                        }

                        echo "Commit SHA for Database: ${COMMIT_SHA}"

                        sh """
                            echo "Building database image..."
                            DOCKER_BUILDKIT=1 docker build -t ${DATABASE_ECR_URL}:${IMAGE_TAG} -t ${DATABASE_ECR_URL}:${COMMIT_SHA} \
                                --build-arg DB_NAME=${DB_NAME} \
                                --build-arg DB_USER=${DB_USER} \
                                --build-arg DB_PASSWORD=${DB_PASSWORD} \
                                --build-arg DB_HOST=${DB_HOST} \
                                .
                        """

                        sh """
                            echo "Pushing database image to ECR..."
                            docker push ${DATABASE_ECR_URL}:${IMAGE_TAG}
                            docker push ${DATABASE_ECR_URL}:${COMMIT_SHA}
                        """
                    }
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                script {
                    sh """
                        echo "Updating ECS services..."
                        aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service backend-service --force-new-deployment --region ${AWS_REGION}
                        aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service frontend-service --force-new-deployment --region ${AWS_REGION}
                        aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service database-service --force-new-deployment --region ${AWS_REGION}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
