pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_REGION = credentials('AWS_REGION')

        ECS_CLUSTER_NAME = credentials('ECS_CLUSTER_NAME')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[url: 'https://github.com/joelclaudius/devops-assessment.git']]
                    ])
                }
            }
        }

        stage('Setup Docker Authentication') {
            steps {
                script {
                    sh '''
                        echo "Logging into AWS ECR..."
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${BACKEND_ECR_URL}
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${FRONTEND_ECR_URL}
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DATABASE_ECR_URL}
                    '''
                }
            }
        }

        stage('Build and Push Backend Image') {
            steps {
                dir('Task1-VersionControl/app/backend') {
                    script {
                        def COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def IMAGE_TAG = "latest"

                        if (!COMMIT_SHA) {
                            error "COMMIT_SHA is empty! Cannot proceed with build."
                        }

                        echo "Commit SHA for Backend: ${COMMIT_SHA}"
                        echo "Using IMAGE_TAG: ${IMAGE_TAG}"

                        sh """
                            echo "Building backend image..."
                            DOCKER_BUILDKIT=1 docker build -t ${BACKEND_ECR_URL}:${IMAGE_TAG} -t ${BACKEND_ECR_URL}:${COMMIT_SHA} .
                        """

                        sh """
                            echo "Pushing backend image to ECR..."
                            docker push ${BACKEND_ECR_URL}:${IMAGE_TAG}
                            docker push ${BACKEND_ECR_URL}:${COMMIT_SHA}
                        """
                    }
                }
            }
        }

        stage('Build and Push Frontend Image') {
            steps {
                dir('Task1-VersionControl/app/frontend') {
                    script {
                        def COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def IMAGE_TAG = "latest"

                        if (!COMMIT_SHA) {
                            error "COMMIT_SHA is empty! Cannot proceed with build."
                        }

                        echo "Commit SHA for Frontend: ${COMMIT_SHA}"

                        sh """
                            echo "Building frontend image..."
                            DOCKER_BUILDKIT=1 docker build -t ${FRONTEND_ECR_URL}:${IMAGE_TAG} -t ${FRONTEND_ECR_URL}:${COMMIT_SHA} .
                        """

                        sh """
                            echo "Pushing frontend image to ECR..."
                            docker push ${FRONTEND_ECR_URL}:${IMAGE_TAG}
                            docker push ${FRONTEND_ECR_URL}:${COMMIT_SHA}
                        """
                    }
                }
            }
        }

        stage('Build and Push Database Image') {
            steps {
                dir('Task1-VersionControl/app/database') {
                    script {
                        def COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def IMAGE_TAG = "latest"

                        if (!COMMIT_SHA) {
                            error "COMMIT_SHA is empty! Cannot proceed with build."
                        }

                        echo "Commit SHA for Database: ${COMMIT_SHA}"

                        sh """
                            echo "Building database image..."
                            DOCKER_BUILDKIT=1 docker build -t ${DATABASE_ECR_URL}:${IMAGE_TAG} -t ${DATABASE_ECR_URL}:${COMMIT_SHA} .
                        """

                        sh """
                            echo "Pushing database image to ECR..."
                            docker push ${DATABASE_ECR_URL}:${IMAGE_TAG}
                            docker push ${DATABASE_ECR_URL}:${COMMIT_SHA}
                        """
                    }
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                script {
                    echo "Updating ECS services with the new images..."

                    // Update the ECS services to use the new images
                    sh """
                        aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service backend-service --force-new-deployment --region ${AWS_REGION}
                        aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service frontend-service --force-new-deployment --region ${AWS_REGION}
                        aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service database-service --force-new-deployment --region ${AWS_REGION}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
