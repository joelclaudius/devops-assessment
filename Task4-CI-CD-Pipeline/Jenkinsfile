pipeline {
    agent any

    environment {
        SECRET_KEY = credentials('SECRET_KEY')
        DEBUG = credentials('DEBUG')
        DB_NAME = credentials('DB_NAME')
        DB_USER = credentials('DB_USER')
        DB_PASSWORD = credentials('DB_PASSWORD')
        DB_HOST = credentials('DB_HOST')
        DB_PORT = credentials('DB_PORT')
        ALLOWED_HOSTS = credentials('ALLOWED_HOSTS')
        REACT_APP_API_BASE_URL = credentials('REACT_APP_API_BASE_URL')
        REACT_APP_REFRESH_TOKEN_URL = credentials('REACT_APP_REFRESH_TOKEN_URL')

        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_REGION = credentials('AWS_REGION')

        FRONTEND_ECR_URL = credentials('FRONTEND_ECR_URL')
        BACKEND_ECR_URL = credentials('BACKEND_ECR_URL')
        DATABASE_ECR_URL = credentials('DATABASE_ECR_URL')

        ECS_CLUSTER_NAME = credentials('ECS_CLUSTER_NAME')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Setup Docker Authentication') {
            steps {
                script {
                    echo "Logging into AWS ECR..."
                    withDockerRegistry([credentialsId: 'AWS_ECR_CREDENTIALS', url: "https://${BACKEND_ECR_URL}"]) {}
                    withDockerRegistry([credentialsId: 'AWS_ECR_CREDENTIALS', url: "https://${FRONTEND_ECR_URL}"]) {}
                    withDockerRegistry([credentialsId: 'AWS_ECR_CREDENTIALS', url: "https://${DATABASE_ECR_URL}"]) {}
                }
            }
        }

        stage('Build and Push Backend Image') {
            steps {
                dir('Task1-VersionControl/app/backend') {
                    script {
                        def COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def IMAGE_TAG = "latest"

                        echo "Commit SHA for Backend: ${COMMIT_SHA}"
                        echo "Using IMAGE_TAG: ${IMAGE_TAG}"

                        docker.build("${BACKEND_ECR_URL}:${IMAGE_TAG}", 
                            "--build-arg SECRET_KEY=${SECRET_KEY} \
                             --build-arg AWS_REGION=${AWS_REGION} \
                             --build-arg DB_PASSWORD=${DB_PASSWORD} \
                             --build-arg DB_USER=${DB_USER} \
                             --build-arg DB_NAME=${DB_NAME} \
                             --build-arg DB_HOST=${DB_HOST} \
                             --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
                             --build-arg AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
                             --build-arg ALLOWED_HOSTS=${ALLOWED_HOSTS} .")
                            .withTag("${BACKEND_ECR_URL}:${COMMIT_SHA}")
                            .push()
                    }
                }
            }
        }

        stage('Build and Push Frontend Image') {
            steps {
                dir('Task1-VersionControl/app/frontend') {
                    script {
                        def COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def IMAGE_TAG = "latest"

                        echo "Commit SHA for Frontend: ${COMMIT_SHA}"

                        docker.build("${FRONTEND_ECR_URL}:${IMAGE_TAG}", 
                            "--build-arg REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL} \
                             --build-arg REACT_APP_REFRESH_TOKEN_URL=${REACT_APP_REFRESH_TOKEN_URL} .")
                            .withTag("${FRONTEND_ECR_URL}:${COMMIT_SHA}")
                            .push()
                    }
                }
            }
        }

        stage('Build and Push Database Image') {
            steps {
                dir('Task1-VersionControl/app/database') {
                    script {
                        def COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def IMAGE_TAG = "latest"

                        echo "Commit SHA for Database: ${COMMIT_SHA}"

                        docker.build("${DATABASE_ECR_URL}:${IMAGE_TAG}", 
                            "--build-arg DB_NAME=${DB_NAME} \
                             --build-arg DB_USER=${DB_USER} \
                             --build-arg DB_PASSWORD=${DB_PASSWORD} \
                             --build-arg DB_HOST=${DB_HOST} .")
                            .withTag("${DATABASE_ECR_URL}:${COMMIT_SHA}")
                            .push()
                    }
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                script {
                    echo "Updating ECS services..."
                    sh "aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service backend-service --force-new-deployment --region ${AWS_REGION}"
                    sh "aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service frontend-service --force-new-deployment --region ${AWS_REGION}"
                    sh "aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service database-service --force-new-deployment --region ${AWS_REGION}"
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
